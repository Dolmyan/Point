from datetime import datetime, timedelta

from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram import Router
from aiogram.fsm.context import FSMContext
import asyncio
import logging

from database import BotDB
from config import TG_TOKEN
from app.states import Form
from app.post_generation.carousel_generator import generate_carousel
from funcs import text_or_voice
from app.subscription_funcs import SubscriptionManager
from aiogram import Bot

db = BotDB('point.db')
router = Router()
bot = Bot(token=TG_TOKEN)
logger = logging.getLogger(__name__)

subscription_manager = SubscriptionManager(db=db, bot=bot)

# -------------------- –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã --------------------
@router.message(lambda message: message.text == "üìå –ö–∞—Ä—É—Å–µ–ª—å")
async def platform_carousel(message: Message, state: FSMContext):
    # –£–ë–†–ê–õ–ò can_generate() ‚Äî –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–ø–∏—Å—ã–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='Instagram', callback_data='instagram'),
         InlineKeyboardButton(text='Telegram', callback_data='telegram')],
    ])
    await message.answer(
        text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É</b>\n–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ ‚¨áÔ∏è",
        reply_markup=kb,
        parse_mode="HTML"
    )



@router.callback_query(lambda c: c.data in ["instagram", "telegram"])
async def platform_chosen(callback_query: CallbackQuery, state: FSMContext):
    # –£–ë–†–ê–õ–ò can_generate()
    platform = callback_query.data
    await state.update_data(platform=platform)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i), callback_data=f"{i}_carousel") for i in range(1, 5)],
        [InlineKeyboardButton(text=str(i), callback_data=f"{i}_carousel") for i in range(5, 8)],
    ])
    await callback_query.message.answer_photo(caption='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º', reply_markup=kb,
                                              photo="AgACAgIAAxkBAAIIvWi68J0jDjFwss0jx6k8UXDtwX2IAAIE-jEbXwbZSRhDnbZXbs0MAQADAgADdwADNgQ")


@router.callback_query(lambda c: c.data.endswith("_carousel"))
async def scheme_chosen(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(scheme_number=int(callback_query.data.split("_")[0]))
    await callback_query.message.answer(
        "üé° –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ö–µ–º—É\n\n‚ú® –î–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å!\n‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∂–µ–º –Ω–∞ –∫–∞—Ä—É—Å–µ–ª–∏.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nüëâ <b>@point_content</b>",
        parse_mode="HTML"
    )
    await state.set_state(Form.signature)


@router.message(Form.signature)
async def signature(message: Message, state: FSMContext):
    await state.update_data(signature=message.text)
    await message.answer(
        "üí° <i>–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</i>\n\n‚úçÔ∏è –ú–æ–∂–µ—à—å <b>–Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º</b>\nüéôÔ∏è –ò–ª–∏ <b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ</b> ‚Äî —è —Å–∞–º –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.",
        parse_mode="HTML"
    )
    await state.set_state(Form.carousel_theme)


@router.message(Form.carousel_theme)
async def carousel_generation(message: Message, state: FSMContext):
    user_id = message.from_user.id
    sub = db.get_subscription(user_id)

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è last_reset, –µ—Å–ª–∏ None ---
    if not sub.get("carousel_count_last_reset"):
        today_str = datetime.now().strftime("%Y-%m-%d")
        db.update_subscription(user_id, carousel_count_last_reset=today_str)
        sub["carousel_count_last_reset"] = today_str

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π ---
    try:
        last_reset = datetime.strptime(sub["carousel_count_last_reset"], "%Y-%m-%d")
    except Exception:
        # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        last_reset = datetime.now()
        db.update_subscription(user_id, carousel_count_last_reset=datetime.now().strftime("%Y-%m-%d"))
        sub["carousel_count_last_reset"] = datetime.now().strftime("%Y-%m-%d")

    if datetime.now() - last_reset >= timedelta(days=30):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–±—Ä–æ—Å–∞
        db.update_subscription(
            user_id,
            carousel_count=0,
            carousel_count_last_reset=datetime.now().strftime("%Y-%m-%d")
        )
        sub["carousel_count"] = 0
        sub["carousel_count_last_reset"] = datetime.now().strftime("%Y-%m-%d")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if sub["status"] == 1 and sub.get("carousel_count", 0) >= 12:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="go_to_payment")],
        ])
        await message.answer(
            text="‚ö†Ô∏è –ù–∞ –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ 12 –∫–∞—Ä—É—Å–µ–ª–µ–π –≤ –º–µ—Å—è—Ü. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞.",
            reply_markup=keyboard
        )
        return

    # ---------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏) ----------------
    # can_generate() –≤–µ—Ä–Ω—ë—Ç True –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —Å–∞–º —Å–ø–∏—Å—ã–≤–∞–µ—Ç free_generation.
    if not await subscription_manager.can_generate(user_id):
        return  # notify_if_no_access —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    # –û–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è free_generation
    sub = db.get_subscription(user_id)

    # --- –í—Å—ë –≥–æ—Ç–æ–≤–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ---
    theme = await text_or_voice(message)
    waiting_msg = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ", parse_mode='HTML')

    data = await state.get_data()
    prompt = f"{db.get_business(user_id=user_id)} –¢–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {theme}"
    platform = data.get("platform")
    scheme_number = int(data.get("scheme_number"))
    sig = data.get("signature")
    style = db.get_style(user_id)

    if scheme_number > 1 and platform == "instagram":
        scheme_number = scheme_number * 2 - 1
    if platform == "telegram":
        scheme_number = scheme_number * 2

    loop = asyncio.get_event_loop()
    request_task = loop.run_in_executor(None, generate_carousel, prompt, scheme_number, sig, style)

    # –∞–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    dots_animation = [
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..",
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        "‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        "‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..",
        "‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    ]
    delay = 0.5
    try:
        while not request_task.done():
            for dots in dots_animation:
                if request_task.done():
                    break
                await asyncio.sleep(delay)
                await waiting_msg.edit_text(dots)
    except asyncio.CancelledError:
        logger.warning("–ê–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    files = await request_task
    await bot.delete_message(chat_id=message.chat.id, message_id=waiting_msg.message_id)

    media_group = []
    for i, file in enumerate(files):
        if i == 0:
            media_group.append(InputMediaPhoto(media=file, caption="üìå –ö–∞—Ä—É—Å–µ–ª—å"))
        else:
            media_group.append(InputMediaPhoto(media=file))
    await message.answer_media_group(media_group)

    # --- –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ---
    if sub["status"] == 1:
        new_count = sub.get("carousel_count", 0) + 1
        db.update_subscription(user_id, carousel_count=new_count)

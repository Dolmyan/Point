import logging
import asyncio
import os
import re
import time
from datetime import datetime, timedelta

from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.fsm import state
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton, user
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from app.generators import *
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.handlers import menu
from app.states import Form
from config import *
from database import BotDB
from funcs import text_or_voice

db = BotDB('point.db')
router = Router()
bot = Bot(token=TG_TOKEN)

logger = logging.getLogger(__name__)


@router.callback_query(lambda c: c.data in ['registration'])
async def registration(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
            "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ—ë–º –±–∏–∑–Ω–µ—Å–µ –∏–ª–∏ –æ —Ç–æ–º, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è ‚Äî "
            "—Ç–∞–∫ —è —Å–º–æ–≥—É —Ç–æ—á–Ω–µ–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ç–µ–±—è, –∞ –Ω–µ –≤ –ø—É—Å—Ç–æ—Ç—É.\n\n"
            "‚Üí –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –∫–æ–Ω—Ç–µ–Ω—Ç?\n"
            "‚Üí –ö—Ç–æ —Ç–≤–æ—è –∞—É–¥–∏—Ç–æ—Ä–∏—è, —Å –∫–µ–º –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å?\n"
            "‚Üí –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥, –≤ —á—ë–º –æ—Ç–ª–∏—á–∏—è?\n"
            "–í—Å—ë, —á—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–µ–±—è –∏ —Ç–≤–æ—ë –¥–µ–ª–æ.\n\n"
            "üí° –ú–æ–∂–µ—à—å –Ω–∞–∫–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º, –Ω–æ <b>–≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî –±—É–¥–µ—Ç –∫—Ä—É—á–µ</b>. "
            "–¢–∞–∫ –ø–æ–ª—É—á–∏—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ —ç–º–æ—Ü–∏–π, –∞ –º–Ω–µ –ø—Ä–æ—â–µ –ø–æ–π–º–∞—Ç—å —Ç–≤–æ–π –≤–∞–π–±. üé§",
            parse_mode="HTML"
    )
    await state.set_state(Form.business)

@router.message(Form.business)
async def business(message: Message, state: FSMContext):
    business = await text_or_voice(message)

    db.update_business(user_id=message.from_user.id, business=business)
    await message.answer(
            "üí™ <b>–ü–æ–∫–∞–∂–∏ —Å–≤–æ–π —Å—Ç–∏–ª—å!</b>\n\n"
            "–ß—Ç–æ–±—ã —è –ø–æ–Ω—è–ª —Ç–≤–æ–π –ø–æ–¥—Ö–æ–¥, –æ—Ç–ø—Ä–∞–≤—å <b>–æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä</b> —Ç–≤–æ–µ–≥–æ –ø–æ—Å—Ç–∞ –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ <b>¬´Telegram¬ª</b> ‚Äî "
            "–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–≤–æ–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n\n"
            "üìù –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç.",
            parse_mode="HTML"
    )
    await state.set_state(Form.reg_style)

processed_media_groups = set()


@router.message(Form.reg_style)
async def reg_style(message: Message, state: FSMContext):
    if message.media_group_id:
        if message.media_group_id in processed_media_groups:
            return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞
        processed_media_groups.add(message.media_group_id)
    reg_style=await text_or_voice(message)
    db.update_style(user_id=message.from_user.id, style=reg_style)
    await message.answer(
            "‚ú® <b>–ì–æ—Ç–æ–≤–æ!</b> –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.\n"
            "–¢–µ–ø–µ—Ä—å —è –∑–∞—Ä—è–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –ø–∏–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å –∏ –∑–∞–¥–∞—á–∏.\n\n"
            "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è",
            parse_mode="HTML",
            reply_markup=menu
    )
    await state.clear()



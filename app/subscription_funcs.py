from datetime import datetime, timedelta

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# today_date=datetime.now()
today_date = datetime(2025, 11, 2, 12, 0, 0)  # 1 —è–Ω–≤–∞—Ä—è 2030, 12:00
class SubscriptionManager:
    def __init__(self, db, bot):
        """
        db: —ç–∫–∑–µ–º–ø–ª—è—Ä BotDB
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä aiogram.Bot
        """
        self.db = db
        self.bot = bot

    # ------------------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ -------------------
    def use_free_generation(self, user_id):
        """–°–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç."""
        sub = self.db.get_subscription(user_id)
        if sub["free_generations"] > 0:
            new_free = sub["free_generations"] - 1
            # –ù–µ —Ç—Ä–æ–≥–∞–µ–º status ‚Äî —Å–ø–∏—Å–∞–Ω–∏–µ free_generations –Ω–µ –¥–æ–ª–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            self.db.update_subscription(user_id, free_generations=new_free)
            return True
        return False

    def activate_subscription(self, user_id, plan_type, days=30):
        """
        plan_type: 1 = –ë–∞–∑–æ–≤—ã–π, 2 = –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
        –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ days –¥–Ω–µ–π
        """
        end_date = datetime.now() + timedelta(days=days)
        self.db.update_subscription(
            user_id,
            status=plan_type,
            subscription_end=end_date.strftime("%Y-%m-%d %H:%M:%S")
        )

    def is_subscription_active(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        sub = self.db.get_subscription(user_id)
        # —Å—Ç–∞—Ç—É—Å 0 = –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        if sub["status"] == 0:
            return False

        # –ï—Å–ª–∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π (—á—ë—Ç–∫–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞)
        if not sub.get("subscription_end"):
            return False

        try:
            end = datetime.strptime(sub["subscription_end"], "%Y-%m-%d %H:%M:%S")
        except Exception:
            # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–º–∞–Ω, —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏ –æ–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.db.update_subscription(user_id, status=0, subscription_end=None)
            return False

        if datetime.now() > end:
            # –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            self.db.update_subscription(user_id, status=0, subscription_end=None)
            return False

        return True

    def remaining_free_generations(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
        sub = self.db.get_subscription(user_id)
        return sub["free_generations"]

    # ------------------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -------------------
    async def notify_if_no_access(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        sub = self.db.get_subscription(user_id)
        payment_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="go_to_payment")],
        ])
        if sub["status"] == 0 and sub["free_generations"] == 0:
            await self.bot.send_message(chat_id=user_id,
                                        text="‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",
                                        reply_markup=payment_kb)
            return False
        return True

    async def notify_subscription_active(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        sub = self.db.get_subscription(user_id)
        if sub["status"] == 0 and sub["free_generations"] == 0:
            msg = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–∞—Ä–∏—Ñ."
        elif sub["status"] == 0 and sub["free_generations"] > 0:
            msg = f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {sub['free_generations']} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π."
        else:
            msg = f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ (—Å—Ç–∞—Ç—É—Å {sub['status']}) –¥–æ {sub['subscription_end']}."
        await self.bot.send_message(user_id, msg)

    # ------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞ -------------------
    async def can_generate(self, user_id):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π:
        - –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Üí True
        - –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Üí —Å–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–Ω—É ‚Üí True
        - –ï—Å–ª–∏ –Ω–µ—Ç –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç ‚Üí False
        """
        if self.is_subscription_active(user_id):
            return True
        if self.use_free_generation(user_id):
            return True
        await self.notify_if_no_access(user_id)
        return False

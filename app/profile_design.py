import logging
import asyncio
import os
import re
import time
from datetime import datetime, timedelta

from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.fsm import state
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton, user
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from app.generators import *
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.handlers import menu
from app.states import Form
from config import *
from database import BotDB
from funcs import response_generator

db = BotDB('point.db')
router = Router()
bot = Bot(token=TG_TOKEN)

logger = logging.getLogger(__name__)


@router.message(lambda message: message.text == "üé® –î–∏–∑–∞–π–Ω –ø—Ä–æ—Ñ–∏–ª—è")
async def profile_design(message: Message, state: FSMContext):
    user_id=message.from_user.id

    from app.subscription_funcs import SubscriptionManager
    subscription_manager = SubscriptionManager(db, bot)
    if not await subscription_manager.can_generate(user_id):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∏–¥—ë—Ç
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ú® –ù–∞–±–æ—Ä —ç–º–æ–¥–∑–∏", callback_data="emoji_set")],
        [InlineKeyboardButton(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è IG", callback_data="ig_bio")],
        [InlineKeyboardButton(text="üåü –ò–¥–µ–∏ –¥–ª—è Highlights IG", callback_data="ig_highlights")]
    ])
    await bot.send_photo(
            caption="""
            üí° –ß—Ç–æ –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å?\n
            –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ ‚¨á  
            """,
            parse_mode="HTML",
            photo='AgACAgIAAxkBAAOoaLCncUpTj5yVmb99qKnWCzCzWdwAAloBMhulPIlJa-XdYhMiqGgBAAMCAAN3AAM2BA',
            chat_id=message.chat.id,
            reply_markup=kb
    )

PROMPTS_INLINE = {
    "emoji_set": (
        "–ó–∞–¥–∞—á–∞: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫ —ç–º–æ–¥–∑–∏ (4‚Äì7 —ç–º–æ–¥–∑–∏) –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ—Å—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∏—à–µ.\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É: EMOJI_STRING ‚Äî –∫–æ—Ä–æ—Ç–∫–æ, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ).\n"
        "–ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π."
    ),
    "ig_bio": (
        "–ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—Å–∞—Ç—å 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ bio –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–∫–∞–∂–¥—ã–π 1‚Äì2 —Å—Ç—Ä–æ–∫–∏, –¥–æ ~140 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É–∫–∞–∂–∏: BIO ‚Äî EMOJI (1‚Äì2 —ç–º–æ–¥–∑–∏) ‚Äî CTA (–æ–¥–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ).\n"
        "–ü–∏—à–∏ –∂–∏–≤–æ –∏ –ø—Ä–æ–¥–∞—é—â–µ, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π."
    ),
    "ig_highlights": (
        "–ó–∞–¥–∞—á–∞: –ø—Ä–∏–¥—É–º–∞—Ç—å 8 –∏–¥–µ–π –¥–ª—è Highlights IG. –î–ª—è –∫–∞–∂–¥–æ–π –∏–¥–µ–∏–∏ –¥–∞–π: –ù–∞–∑–≤–∞–Ω–∏–µ (1‚Äì2 —Å–ª–æ–≤–∞) ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) ‚Äî –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞/—ç–º–æ–¥–∑–∏.\n"
        "–í—ã–≤–æ–¥ ‚Äî –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 8 –ø—É–Ω–∫—Ç–æ–≤. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
    ),
}

@router.callback_query(lambda c: c.data in ["emoji_set", "ig_bio", "ig_highlights"])
async def inline_choice(callback_query: CallbackQuery, state: FSMContext):
    selected = callback_query.data
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ FSM
    await state.update_data(selected_callback=selected)

    data = await state.get_data()
    selected = data["selected_callback"]


    goal = db.get_business(user_id=callback_query.from_user.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    prompt = PROMPTS_INLINE[selected]
    content = f'''
{goal}
{prompt}
'''
    request_task = asyncio.create_task(
            generator(user_id=callback_query.from_user.id, content=content)
    )
    response = await response_generator(callback_query, request_task, bot=bot)

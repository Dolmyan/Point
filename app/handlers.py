import io
import logging
import asyncio
import os
import re
import time
from datetime import datetime, timedelta

from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.fsm import state
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from app.generators import *
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.generators import generator
from app.post_generation.carousel_generator import generate_carousel_text
from app.states import Form
from config import *
from database import BotDB
from funcs import show_waiting_animation

import openai

openai.api_key = AI_TOKEN


db = BotDB('point.db')
router = Router()
bot = Bot(token=TG_TOKEN)

logger = logging.getLogger(__name__)


menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞'),
            KeyboardButton(text='üí° –ò–¥–µ–∏ –ø–æ—Å—Ç–æ–≤'),
            KeyboardButton(text='üìå –ö–∞—Ä—É—Å–µ–ª—å'),

        ],
        [
            KeyboardButton(text='üé® –î–∏–∑–∞–π–Ω –ø—Ä–æ—Ñ–∏–ª—è'),
            KeyboardButton(text='üé¨ –í–∏–¥–µ–æ –∏–¥–µ–∏')
        ],
        [
            KeyboardButton(text='üöÄ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ'),
            KeyboardButton(text='üõ†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å')
        ]
    ],
    resize_keyboard=True
)





@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    if message.from_user.username:
        username = message.from_user.username.lower()

    users = db.get_all_user_ids()
    is_new_user = user_id not in users

    if is_new_user:
        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {username}.")
        db.add_user(user_id=user_id,
                        username=username)


    if not db.get_thread(user_id):
        thread = await client.beta.threads.create()
        thread_id = thread.id
        db.update_thread(user_id, thread_id)
        logger.info(f"–¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, ID —Ç—Ä–µ–¥–∞: {thread_id}")
    await bot.send_photo(caption=
                         "üëã –ù–∞ —Å–≤—è–∑–∏ <b>Point</b> ‚Äî —Ç–≤–æ–π –Ω–æ–≤—ã–π –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
                         "–ó–Ω–∞—é-–∑–Ω–∞—é, –∑–≤—É—á–∏—Ç –≥—Ä–æ–º–∫–æ, –Ω–æ —è —Ä–µ–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–∞—é –∂–∏–∑–Ω—å –∫—Ä–µ–∞—Ç–æ—Ä—É, —Å–º–º—â–∏–∫—É –∏–ª–∏ –±–ª–æ–≥–≥–µ—Ä—É. –°–º–æ—Ç—Ä–∏, —á—Ç–æ –º–æ–≥—É:\n\n"
                         "‚Üí –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ ‚Äî –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å "
                         "(–∏ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –ª—É—á—à–µ, —á–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π ChatGPT)\n"
                         "‚Üí –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å ‚Äî —Ö–æ—á–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –∏–ª–∏ —Å—ã–ø–∞—Ç—å –º–µ–º–∞–º–∏? –õ–µ–≥–∫–æ, —è –Ω–∞—É—á—É—Å—å —Ç–∞–∫ –∂–µ\n"
                         "‚Üí –û–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –ø–æ—Å—Ç—ã —Ö–æ—Ç—å –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ —Å —Å–æ–±–∞–∫–æ–π\n"
                         "‚Üí –ì–µ–Ω–µ—Ä–∏—Ç—å –∏–¥–µ–∏, —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã, –¥–µ–ª–∞—Ç—å highlights, –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º "
                         "–∏ –¥–µ–ª–∞—Ç—å –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∫—Ä–µ–∞—Ç–∏–≤–æ–º\n\n"
                         "üåÄ –°–æ –º–Ω–æ–π —Ç—ã —Ä–∞–∑–≥–æ–Ω–∏—à—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 100% ‚Äî –æ—Ç –ø–µ—Ä–≤—ã—Ö –∏–¥–µ–π –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.\n\n",
                         reply_markup=None if is_new_user else menu,
                         parse_mode='HTML',
                         photo='AgACAgIAAxkBAAMOaLByuV_Y6t-2WNWzRthLr6_naMAAAiUCMhulPIFJ_dsbQ8H0RI4BAAMCAAN3AAM2BA',
                         chat_id=user_id,

                         )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!', callback_data='registration')],
    ])
    await message.answer(text=
                         "<b>–î–∞–≤–∞–π –ø–æ–∫–∞–∂—É, –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ</b>",
                         parse_mode='HTML',
                         reply_markup=kb
                         )


    await state.clear()


# @router.message(F.photo)
# async def get_photo_id(message: Message):
#     file_id = message.photo[-1].file_id
#     print(file_id)
#     await message.answer(f"{file_id}")
#     await bot.send_photo(chat_id=message.chat.id, photo=file_id)





@router.message(Command('test'))
async def cmd_start(message: Message, state: FSMContext):
    a = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ", parse_mode='HTML')
    request_task = asyncio.create_task(
            generator(
                    user_id=message.from_user.id,
                    content='–∫—Ç–æ —Ç—ã? –∫–∞–∫–∏–µ –≤ —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?'
            )
    )
    await show_waiting_animation(a, request_task)
    response = await request_task

    id[0] = a.message_id
    await message.answer(text=f'{response}', parse_mode='HTML')


@router.message(Command('reset'))
async def cmd_start(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞.")
    thread = await client.beta.threads.create()
    thread_id = thread.id
    db.update_thread(message.from_user.id, thread_id)
    logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ—Ç–æ–∫ —Å ID {thread_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")

@router.message(Command('t'))
async def cmd_start(message: Message):
    button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='t', callback_data='platform_carousel')],
    ])
    res=generate_carousel_text('–≤–æ–¥–æ–ø–æ–π', message.from_user.id)

    await message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤ —Ç–µ–∫—Å—Ç',
        reply_markup=button
    )

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @router.message(F.voice)
# async def voice_to_text(message: Message):
#     voice = message.voice
#     file = await message.bot.get_file(voice.file_id)
#     file_bytes = await message.bot.download_file(file.file_path)
#
#     # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV —á–µ—Ä–µ–∑ ffmpeg –≤ –ø–∞–º—è—Ç–∏
#     import subprocess
#     ogg_data = file_bytes.read()
#     process = subprocess.Popen(
#         ['ffmpeg', '-i', 'pipe:0', '-f', 'wav', 'pipe:1'],
#         stdin=subprocess.PIPE,
#         stdout=subprocess.PIPE,
#         stderr=subprocess.DEVNULL
#     )
#     wav_data, _ = process.communicate(input=ogg_data)
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI Whisper
#     audio_file = io.BytesIO(wav_data)
#     audio_file.name = "voice.wav"
#     transcript = openai.audio.transcriptions.create(
#         model="whisper-1",
#         file=audio_file
#     )
#
#     raw_text = transcript.text
#
#     # –ü—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ GPT –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
#     response = openai.chat.completions.create(
#         model="gpt-4o-mini",
#         messages=[
#             {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏ —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å."},
#             {"role": "user", "content": f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç, –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é:\n\n{raw_text}"}
#         ]
#     )
#
#     corrected_text = response.choices[0].message.content
#
#     await message.answer(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ GPT):\n{corrected_text}")

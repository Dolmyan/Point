import re
import time

import openai
import httpx
from openai import AssistantEventHandler, AsyncOpenAI
from typing_extensions import override
import asyncio

from config import AI_TOKEN, MAX_MSG_LEN  # , PROXY
import logging

from database import BotDB

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(level=logging.INFO)

cached_assistant_id = None

db = BotDB('point.db')


# –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
def res(response):
    response = re.sub(r'###(.*?)###', r'<b>\1</b>', response)
    response = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', response)
    response = re.sub(r'####(.*?)', r'*\1*', response)
    response = re.sub(r'###(.*?)', r'\1', response)
    return response



import httpx
from openai import AsyncOpenAI




client = AsyncOpenAI(
    api_key=AI_TOKEN,
    http_client=httpx.AsyncClient(


    )
)




async def get_assistant():
    global cached_assistant_id
    if cached_assistant_id:
        return cached_assistant_id

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
        assistants_list = await client.beta.assistants.list()
        for existing_assistant in assistants_list.data:
            if existing_assistant.name == "Point":
                cached_assistant_id = existing_assistant.id
                logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å ID: {cached_assistant_id}")
                return cached_assistant_id

        return cached_assistant_id
    except openai.APIConnectionError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API OpenAI: {e}")
        raise e




async def get_thread_content(thread_id):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞
    messages_response = await client.beta.threads.messages.list(thread_id=thread_id)

    extracted_messages = []
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    for message in messages_response.data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if hasattr(message, 'content') and message.content:
            for block in message.content:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –±–ª–æ–∫ —Ç–µ–∫—Å—Ç
                if hasattr(block, 'text') and hasattr(block.text, 'value'):
                    extracted_messages.append({
                        'role': message.role,  # –†–æ–ª—å: 'user' –∏–ª–∏ 'assistant'
                        'text': block.text.value  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    })

    return extracted_messages



async def generator(user_id, content, max_retries=15):
    # –ü–æ–ª—É—á–∞–µ–º assistant_id
    try:
        assistant_id = await get_assistant()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ assistant_id: {e}")
        return

    # –ü–æ–ª—É—á–∞–µ–º thread_id –∏–∑ –ë–î
    thread_id = db.get_thread(user_id)

    if not thread_id:
        logging.info(f"üì≠ –ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
        try:
            thread = await client.beta.threads.create()
            thread_id = thread.id
            db.update_thread(user_id, thread_id)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞: {e}")
            return

    for attempt in range(max_retries):
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            response = await client.beta.threads.messages.create(
                thread_id=thread_id,
                role="user",
                content=content,
            )

            logging.info(f"üöÄ –°–æ–∑–¥–∞—é –∑–∞–ø—É—Å–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})...")
            run_response = await client.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=assistant_id,
            )

            while True:
                run_status = await client.beta.threads.runs.retrieve(
                        run_id=run_response.id,
                        thread_id=thread_id
                )

                if run_status.status == 'completed':
                    break
                elif run_status.status == 'failed':
                    logging.warning("‚ùå –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é –ø–æ—Ç–æ–∫ –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...")
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
                    thread = await client.beta.threads.create()
                    thread_id = thread.id
                    db.update_thread(user_id, thread_id)
                    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ for
                    continue  # <--- –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Ü–∏–∫–ª for —Å–¥–µ–ª–∞–ª —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É

                await asyncio.sleep(5)
            else:
                continue  # –µ—Å–ª–∏ —Ü–∏–∫–ª while –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ break, –∏–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ

            # –ï—Å–ª–∏ run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_response = await client.beta.threads.messages.list(thread_id=thread_id)
            if messages_response.data:
                text = res(messages_response.data[0].content[0].text.value)
                return text
            else:
                logging.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
                return None

        except openai.APIConnectionError as e:
            logging.warning(f"üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}): {e}")
            await asyncio.sleep(2 ** attempt)
            if attempt == max_retries - 1:
                logging.error("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
                raise e

        except Exception as e:
            logging.error(f"‚ùó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise e



async def generator_nothread(user_id, content, max_retries=10):
    assistant_id = await get_assistant()
    thread_id = db.get_thread(user_id)

    threadik = await client.beta.threads.create()
    threadik_id = threadik.id

    response = await client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=content,
    )

    for attempt in range(max_retries):
        try:
            run_response = await client.beta.threads.runs.create(
                thread_id=threadik_id,
                assistant_id=assistant_id,
            )
            while True:
                run_status = await client.beta.threads.runs.retrieve(run_id=run_response.id, thread_id=threadik_id)
                if run_status.status == 'completed':
                    break
                elif run_status.status == 'failed':
                    logging.error("–ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")

                    return

                await asyncio.sleep(5)

            messages_response = await client.beta.threads.messages.list(thread_id=threadik_id)
            if messages_response.data:
                text = res(messages_response.data[0].content[0].text.value)
                return text
            else:
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
                return None
        except openai.APIConnectionError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}): {e}")
            await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            if attempt == max_retries - 1:
                logging.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
                raise e


async def generate_test(question, max_retries=5, thread_id=None):
    assistant_id = await get_assistant()

    content = f'{question}'

    if not thread_id:
        thread = await client.beta.threads.create()
        thread_id = thread.id

    response = await client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=content,
    )

    for attempt in range(max_retries):
        try:
            run_response = await client.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=assistant_id,
            )
            while True:
                run_status = await client.beta.threads.runs.retrieve(run_id=run_response.id, thread_id=thread_id)
                if run_status.status == 'completed':
                    break
                elif run_status.status == 'failed':
                    logging.error("–ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                    return

                await asyncio.sleep(5)

            messages_response = await client.beta.threads.messages.list(thread_id=thread_id)
            if messages_response.data:
                text = res(messages_response.data[0].content[0].text.value)
                return text
            else:
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
                return None
        except openai.APIConnectionError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}): {e}")
            await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            if attempt == max_retries - 1:
                logging.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
                raise e